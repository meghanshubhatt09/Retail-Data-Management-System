
-- DATABASE CREATION 
Create DATABASE RMS;
GO

Use RMS;
GO


--- CREATING EMPLOYEE TABLE

CREATE TABLE EMPLOYEE
(
    EMPLOYEEID INT NOT NULL IDENTITY(1000,1),
    SSN VARCHAR(11) UNIQUE NOT NULL,
    FNAME VARCHAR(50),
    LNAME VARCHAR(50),
    DOB date,
    GENDER CHAR(1),
    SALARY FLOAT,
    DEPTID VARCHAR(4),
    EMP_ADDRESS_LINE1 VARCHAR(100),
    EMP_ADDRESS_LINE2 VARCHAR(100),
    CITY VARCHAR(20),
    MNGRID INT,
    EMPTYPE VARCHAR(1) 

    CONSTRAINT EmployeeID_PK PRIMARY KEY (EMPLOYEEID),
    CONSTRAINT ManagerID_FK FOREIGN KEY (MNGRID) REFERENCES EMPLOYEE(EMPLOYEEID),
    CONSTRAINT CHK_EMP_TYPE CHECK ([EMPTYPE] in ('F','C')),
    CONSTRAINT CHK_EMP_GENDER_TYPE CHECK ([GENDER] in ('M','F','O'))

);
GO

-- FULLTIME EMPLOYEE TABLE

CREATE TABLE FULLTIMEEMP(
    FEMPID INT UNIQUE NOT NULL,
    BONUS FLOAT,
    POSITION VARCHAR(20)

    CONSTRAINT Fulltime_EmpID_FK FOREIGN KEY (FEMPID) REFERENCES  EMPLOYEE(EMPLOYEEID)
);
GO

-- CONTRACT EMPLOYEE TABLE

CREATE TABLE CONTRACTEMP(
    CEMPID INT UNIQUE NOT NULL,
    CONTRACTDURATION VARCHAR(20),
    CONTRACTORAGENCY VARCHAR(20)

    CONSTRAINT Contract_EmpID_FK FOREIGN KEY (CEMPID) REFERENCES  EMPLOYEE(EMPLOYEEID)

);
GO


-- CREATING STORE TABLE

CREATE TABLE STORE
(STOREID INT NOT NULL IDENTITY(1,1),
LOCATIONNAME VARCHAR(20),
LMGRID INT NOT NULL
CONSTRAINT STORENO_PK PRIMARY KEY (STOREID),
CONSTRAINT Manager_Store_FK FOREIGN KEY (LMGRID ) REFERENCES EMPLOYEE(EMPLOYEEID)
);
GO

-- CREATING DEPARTMENT TABLE

CREATE TABLE DEPARTMENT
(
DEPTID VARCHAR(4) NOT NULL ,
DEPTNAME VARCHAR(50),
MANGERID INT NOT NULL,
STOREID INT NOT NULL

CONSTRAINT DeptID_PK PRIMARY KEY (DEPTID),
CONSTRAINT Manger_Dept_FK FOREIGN KEY (MANGERID) REFERENCES EMPLOYEE(EMPLOYEEID),
CONSTRAINT StoreID_DEPT_FK FOREIGN KEY (STOREID) REFERENCES STORE(STOREID)

);
GO

-- WAREHOUSE TABLE CREATION 
CREATE TABLE WAREHOUSE
(
WAREHOUSEID INT IDENTITY(1,1) NOT NULL,
WAREHOUSENAME VARCHAR(20),
STORAGESPACE INT,
STOREID INT ,
CAPACITY INT,
[ADDRESS] VARCHAR(30)

CONSTRAINT WAREHOUSEID_PK PRIMARY KEY (WAREHOUSEID),
CONSTRAINT STORENOWAREHOUSE_FK FOREIGN KEY (STOREID) REFERENCES STORE(STOREID)
);
GO

-- PRODUCT TABLE CREATION
CREATE TABLE PRODUCT
(
PRODUCTID INT NOT NULL IDENTITY(1000,1),
PRODUCTNAME VARCHAR(30),
PRODUCTTYPE VARCHAR(30),
PRODUCTDESC VARCHAR(30),
UNITPRICE INT

CONSTRAINT PRODUCTID_PK PRIMARY KEY (PRODUCTID),
);
GO

-- STOCK PRODUCT TABLE CREATION
CREATE TABLE STOCK_PRODUCT
(
WAREHOUSEID INT,
PRODUCTID INT,
QUANTITY INT,
CONSTRAINT WAREHOUSEID_FK FOREIGN KEY (WAREHOUSEID) REFERENCES WAREHOUSE(WAREHOUSEID),
CONSTRAINT STKPRODUCTID_FK FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID)
);
GO

-- CUSTOMER TABLE CREATION

CREATE TABLE CUSTOMER
(
CUSTOMERID INT IDENTITY (1000,1) NOT NULL,
CUSTFNAME VARCHAR(30) NOT NULL,
CUSTLNAME VARCHAR(30) NOT NULL,
CUSTGENDER CHAR(1),
ADDRESSLINE VARCHAR (50),
CITY VARCHAR(20),
ZIP INT,
PHONE BIGINT UNIQUE NOT NULL ,
DOB DATE NOT NULL,
EMAIL VARCHAR(100) NOT NULL

CONSTRAINT CUSTOMERID_PK PRIMARY KEY (CUSTOMERID),
CONSTRAINT CHK_CUSTOMER_GENDER_TYPE CHECK ([CUSTGENDER] in ('M','F','O'))

);
GO

-- ORDER TABLE CREATION


CREATE TABLE [ORDER]
(
ORDERID INT IDENTITY (1,1) NOT NULL,
CUSTOMERID INT,
ORDERTYPE VARCHAR(30),
STOREID INT,
ORDERDATE DATE

CONSTRAINT OrderID_PK PRIMARY KEY (ORDERID),
CONSTRAINT StoreID_FK FOREIGN KEY (STOREID) REFERENCES STORE(STOREID),
CONSTRAINT CustomerID_FK FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID)
);
GO


alter table [ORDER]
add constraint chk_order check (ORDERTYPE in ('Online','Offline'));


-------
---------------------------UDF used for Computed column(Amount) 

create function [dbo].[UnitPrice] (@ProdID int)
RETURNS int
AS BEGIN
   declare @result int
   select @result = UnitPrice 
   from Product
   where PRODUCTID = @ProdID

    RETURN @result
END
GO


-- ORDER LINE TABLE CREATION
CREATE TABLE ORDERLINE
(
ORDERID INT NOT NULL,
PRODUCTID INT NOT NULL,
QTY INT,
AMOUNT AS dbo.UnitPrice (PRODUCTID) * QTY,
CONSTRAINT OLorderId_FK FOREIGN KEY (ORDERID) REFERENCES [ORDER](ORDERID),
CONSTRAINT OLproductId_FK FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID),
);
GO




-------------------------------------------------------------------



CREATE function [dbo].[PAYMENT_AMOUNT] (@ORDERID int)
RETURNS int
AS BEGIN
   declare @result int

SELECT @result = R.Amt FROM PAYMENT P
INNER JOIN
(SELECT O.ORDERID,SUM(OL.AMOUNT) AS Amt FROM [ORDER] O 
INNER JOIN ORDERLINE OL ON O.ORDERID = OL.ORDERID
GROUP BY O.ORDERID) R
ON P.ORDERID = R.ORDERID and P.ORDERID = @ORDERID
RETURN @result
END
GO



-- PAYMENT TABLE CREATION
CREATE TABLE PAYMENT
(
PAYMENTID INT IDENTITY(100,1) NOT NULL,
PAYMENTTYPE VARCHAR(30),
CHEQUENUMBER BIGINT,
CARDTYPE VARCHAR(20),
CEXPIRYDATE DATE,
CNUMBER BIGINT,
TRANSCATIONDATE DATE,
ORDERID INT,
AMOUNT AS dbo.PAYMENT_AMOUNT(ORDERID)
-- AMOUNT AS dbo.PaymentAmt (PAYMENTID)
CONSTRAINT PAYMENTID_PK PRIMARY KEY (PAYMENTID),
CONSTRAINT ORDERIDPayment_FK FOREIGN KEY (ORDERID) REFERENCES [ORDER](ORDERID)
);
GO



------- NON CLUSTERED INDEX -------

---- ORDERS
CREATE NONCLUSTERED INDEX order_non_cluster
ON [ORDER] (ORDERDATE ASC);

CREATE NONCLUSTERED INDEX payment_non_cluster
ON [PAYMENT] (TRANSCATIONDATE DESC);


CREATE NONCLUSTERED INDEX CUSTOMER_non_cluster
ON [CUSTOMER] (CUSTFNAME DESC);

-------- VIEWS
-------- 1. Top Customers
CREATE VIEW [Top_Customer] AS
SELECT C.CUSTOMERID,C.CUSTFNAME,C.CUSTLNAME, SUM(OL.AMOUNT) AS AMT  FROM CUSTOMER C 
INNER JOIN [ORDER] O 
ON C.CUSTOMERID = O.CUSTOMERID
INNER JOIN ORDERLINE OL 
ON O.ORDERID = OL.ORDERID
GROUP BY C.CUSTOMERID,C.CUSTFNAME,C.CUSTLNAME;
GO


SELECT TOP 5 * FROM Top_Customer ORDER BY AMT DESC;

------- 2. TOP SELLING PRODUCTS
CREATE VIEW [Top_Selling_Products] AS
SELECT P.PRODUCTID,P.PRODUCTNAME, SUM(QTY) AS QTY FROM PRODUCT P
INNER JOIN ORDERLINE OL 
ON P.PRODUCTID = OL.PRODUCTID
GROUP BY P.PRODUCTID,P.PRODUCTNAME;
GO
SELECT TOP 5 * FROM Top_Selling_Products ORDER BY QTY DESC;


------- 2. TOP GROSSING PRODUCTS
CREATE VIEW [Top_Grossing_Products] AS
SELECT P.PRODUCTID,P.PRODUCTNAME, SUM(AMOUNT) AS Total_Amt FROM PRODUCT P
INNER JOIN ORDERLINE OL 
ON P.PRODUCTID = OL.PRODUCTID
GROUP BY P.PRODUCTID,P.PRODUCTNAME;
GO
SELECT TOP 5 * FROM Top_Grossing_Products ORDER BY Total_Amt DESC;






---- DML Trigger
---- ON PRODUCT TABLE IF THERE IS A CHANGE IN PRICE
CREATE TABLE PRODUCT_HISTORY
(
PRODUCTID INT NOT NULL,
OLD_UNITPRICE INT,
NEW_UNITPRICE INT,
ChangeDate datetime null
CONSTRAINT PRODUCTID_PK_HISTORY PRIMARY KEY (PRODUCTID),
);
GO

---- TRIGGER 
---------------------------------------------------------------
ALTER TRIGGER ProductPriceChange
   ON  dbo.PRODUCT
  FOR UPDATE
AS 
BEGIN
IF UPDATE(UNITPRICE) -- only interested in specific change
  begin
INSERT INTO  [PRODUCT_HISTORY] ( 
[PRODUCTID] ,
[OLD_UNITPRICE] ,
[NEW_UNITPRICE] ,
ChangeDate)
  SELECT d.PRODUCTID
  ,d.UNITPRICE
  ,i.UNITPRICE,
  GETDATE()
   FROM DELETED d join INSERTED i on d.PRODUCTID = i.PRODUCTID
end
END
GO
----------------------------------------------------------------

-- SELECT * FROM PRODUCT WHERE PRODUCTID = 9;

-- UPDATE PRODUCT SET UNITPRICE = 60 WHERE PRODUCTID = 9;

-- SELECT * FROM PRODUCT_HISTORY;

------------------------------------------------------------------

---- PROCEDURE
------------Create new customer -----------------
CREATE PROCEDURE [dbo].NEW_CUSTOMER
(@CUSTFNAME varchar(30), @CUSTLNAME varchar(30), @CUSTGENDER char,
@ADDRESSLINE varchar(50), @CITY varchar(20), @ZIP int,
@PHONE bigint, @DOB DATE, @MAIL varchar(30)) as
Begin
if (@PHONE not in (select distinct Phone from Customer))
Begin
Insert into Customer values
(@CUSTFNAME, @CUSTLNAME, @CUSTGENDER, @ADDRESSLINE , @CITY, @ZIP, @PHONE, CAST(@DOB as DATE), @MAIL)
Select 'New Customer Added' as remark,* from Customer where CustomerID = (select max(CustomerID) from Customer)
End
else
Begin
select 'Customer Already Exists' as remark,* from Customer where Phone = @PHONE
End
End

------- CREATE PROCEDURE--- 
--- PLACE NEW ORDER

CREATE PROCEDURE ADD_NEW_PRODUCT (@productname varchar(30),@producttype varchar(30),@productdesc varchar(30),@unitprice int)
AS
BEGIN


IF @productname not in (SELECT DISTINCT PRODUCTNAME FROM PRODUCT)
BEGIN
INSERT INTO PRODUCT VALUES (@productname,@producttype,@productdesc,@unitprice)

SELECT 'New Product Added' as remark,* from PRODUCT where PRODUCTID = (SELECT max(PRODUCTID) FROM PRODUCT)
END

ELSE
BEGIN
SELECT 'Product already exists' as remark,* from PRODUCT where PRODUCTNAME = @productname
END

END

--EXEC ADD_NEW_PRODUCT 'Basic Shorts','Casual Wear','Shorts',60;


---------- CREATE NEW EMPLOYEE

CREATE PROCEDURE [dbo].NEW_EMPLOYEE
(@SSN VARCHAR(11), @FNAME varchar(50), @LNAME varchar(50),@DOB DATE, @EMPGENDER char(1),
@SALARY FLOAT ,@DEPTID VARCHAR(4), @EMP_ADDRESSLINE1 varchar(100), @EMP_ADDRESSLINE2 varchar(100), @CITY varchar(20), @MNGRID int,
@EMPTYPE varchar(1)) as
Begin
if (@SSN not in (select distinct SSN from Employee))
Begin
Insert into Employee values
(@SSN, @FNAME, @LNAME, CAST (@DOB as DATE) , @EMPGENDER, @SALARY, @DEPTID, @EMP_ADDRESSLINE1, @EMP_ADDRESSLINE2, @CITY, @MNGRID, @EMPTYPE)
Select 'New Employee Added' as remark,* from Employee where EmployeeID = (select max(EmployeeID) from Employee)
End
else
Begin
select 'Employee Already Exists' as remark,* from Employee where SSN = @SSN
End
End

-----------------------------------------------------------------------------------------------------------












-- ENCRYPTION SSN COLUMN
alter table EMPLOYEE add [SSN_ENCRYPTION]  varbinary(400);
GO

--Create a master key for the database. 
create MASTER KEY
ENCRYPTION BY PASSWORD = '1234567890@Abc';

-- very that master key exists
SELECT name KeyName,
  symmetric_key_id KeyID,
  key_length KeyLength,
  algorithm_desc KeyAlgorithm
FROM sys.symmetric_keys;

go
--Create a self signed certificate and name it EmpPass
CREATE CERTIFICATE SSNCertificate  
   WITH SUBJECT = 'Employee SSN';  
GO  

--Create a symmetric key  with AES 256 algorithm using the certificate
-- as encryption/decryption method
CREATE SYMMETRIC KEY SSNCertificate_SM 
    WITH ALGORITHM = AES_256  
    ENCRYPTION BY CERTIFICATE SSNCertificate;  
GO  
--drop SYMMETRIC KEY EmpPass_SM 

--Now we are ready to encrypt the password and also decrypt
-- Open the symmetric key with which to encrypt the data.  
OPEN SYMMETRIC KEY SSNCertificate_SM  
   DECRYPTION BY CERTIFICATE SSNCertificate; 

UPDATE EMPLOYEE set [SSN_ENCRYPTION] = EncryptByKey(Key_GUID('SSNCertificate_SM'),  convert(varbinary,SSN)  );
GO
SELECT * FROM EMPLOYEE;





-- DROP COMMANDS

DROP TABLE PAYMENT;
DROP TABLE [ORDER];
DROP TABLE ORDERLINE;
DROP TABLE CUSTOMER;
DROP TABLE STOCK_PRODUCT;
DROP TABLE PRODUCT;
DROP TABLE WAREHOUSE;
DROP TABLE DEPARTMENT;
DROP TABLE STORE;
DROP TABLE CONTRACTEMP;
DROP TABLE FULLTIMEEMP;
DROP TABLE EMPLOYEE;
DROP TABLE PRODUCT_HISTORY;


drop SYMMETRIC KEY SSNCertificate_SM;
drop CERTIFICATE SSNCertificate;
drop master key;